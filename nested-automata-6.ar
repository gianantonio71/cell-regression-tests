type NestedAuto6Mgs = reset, incr_counter(Nat);


reactive nested_automata_6_some_counter {
  input:
    an_input : Ta;
    msg      : NestedAuto6Mgs?;

  output:
    a_counter : Nat;

  state:
    flow_counter : Nat = 0;
    msg_counter  : Nat = 0;

  rules:
    flow_counter = nat(flow_counter + 1) if an_input == :a0 or an_input == :a3 or an_input == :a5;
    msg_counter = if msg == :reset then 0 else nat(msg_counter + _untag_(msg));
    a_counter = nat(flow_counter + msg_counter);
}


reactive nested_automata_6 {
  input:
    my_input : Ta;

  output:
    my_counter      : Nat;
    nested_counter  : Nat;

  state:
    my_counter : Nat = 0;

  rules:
    msg := :incr_counter(10) if my_input == :a2 or my_input == :a5;
    na = nested_automata_6_some_counter(an_input=my_input, msg=msg);
    my_counter = nat(_add_(my_counter, 1)) if my_input == :a1 or my_input == :a4;
    nested_counter = na.a_counter;
}


(Ta, Nat, Nat)* nested_automata_6_test_data = (
  (:a0,   0,    0),
  (:a1,   0,    1),
  (:a2,  10,    1),
  (:a3,  11,    1),
  (:a4,  11,    2),
  (:a5,  22,    2),
  (:a6,  22,    2),
  (:a0,  23,    2),
  (:a1,  23,    3),
  (:a2,  33,    3),
  (:a3,  34,    3),
  (:a4,  34,    4),
  (:a5,  45,    4),
  (:a0,  45,    4)
);


Bool RunAllNestedAutomata6Tests() {
  auto ta: nested_automata_6;

  for input, enc, ec <- nested_automata_6_test_data:
    auto ta.my_input = input;
    auto apply ta done;
    assert done;

    if ta.my_counter != ec or ta.nested_counter != enc:
      Print("ERROR\n");
      print (input, enc, ec);
      print ta.my_counter;
      print ta.nested_counter;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}
