reactive ContToDiscr {
  input:
    an_input : Ta;

  output:
    an_output : <none>?;

  rules:
    an_output := :none when an_input == :a0 or an_input == :a3;
}

reactive ContToDiscrClient {
  input:
    my_input : Ta;

  output:
    counter : Nat;
    my_output : <none>?;

  state:
    counter : Nat = 0;

  rules:
    na = ContToDiscr(an_input=my_input);
    my_output := na.an_output;
    counter = nat(_add_(counter, 1)) : my_output;
}


(Ta, Bool, Nat)* cont_to_discr_client_test_data = (
  (:a0, false, 0),
  (:a1, false, 0),
  (:a2, false, 0),
  (:a3, true,  1),
  (:a4, false, 1),
  (:a0, true,  2),
  (:a1, false, 2),
  (:a2, false, 2),
  (:a3, true,  3),
  (:a4, false, 3)
);


Bool RunAllNestedAutomata4Tests() {
  auto ta : ContToDiscrClient;

  for input, set, counter <- cont_to_discr_client_test_data:
    auto ta.my_input = input;
    auto apply ta done;
    assert done;

    if ta.my_output? != set or ta.counter != counter:
      Print("ERROR\n");
      print (input, set, counter);
      print ta.my_output;
      print ta.counter;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}
