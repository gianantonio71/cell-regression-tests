cell cont_to_disc
{
  input:
    an_input : Ta;

  output:
    an_output : Nil?;

  rules:
    an_output := nil if an_input == :a0 or an_input == :a3;
}

cell cont_to_disc_client
{
  input:
    my_input : Ta;

  output:
    counter : Nat;
    my_output : Nil?;

  state:
    counter : Nat = 0;

  rules:
    na = cont_to_disc(an_input=my_input);
    my_output := na.an_output;
    counter = _add_(counter, 1) : my_output;
}


(Ta, Bool, Nat)* cont_to_disc_client_test_data = (
  (:a0, false, 0),
  (:a1, false, 0),
  (:a2, false, 0),
  (:a3, true , 1),
  (:a4, false, 1),
  (:a0, true , 2),
  (:a1, false, 2),
  (:a2, false, 2),
  (:a3, true , 3),
  (:a4, false, 3)
);


Bool RunAllNestedAutomata4Tests()
{
  auto ta : cont_to_disc_client;

  for input, set, counter <- cont_to_disc_client_test_data:
    auto ta.my_input = input;
    auto apply ta;

    if ta.my_output? != set or ta.counter != counter:
      Print("ERROR\n");
      print (input, set, counter);
      print ta.my_output;
      print ta.counter;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}
