reactive fps50_a {
  input:
    enabled : Bool;

  output:
    counter : Nat;
    next    : <none>?;

  state:
    counter : Nat = 0;

  rules:
    first_frame_half = enabled for not 10ms every 20ms;
    next := :none if first_frame_half;
    counter = nat(_add_(counter, 1)) : next;
}


reactive fps50_b {
  input:
    enabled : Bool;

  output:
    counter : Nat;
    next : <none>?;

  state:
    counter : Nat = 0;

  rules:
    parity = enabled for 20ms every 40ms;
    next := :none : parity;
    counter = nat(_add_(counter, 1)) : next;
}


reactive nested_automata_3 {
  input:
    unused_input : Ta;

  output:
    counter_a : Nat;
    counter_b : Nat;

  rules:
    fg_a = fps50_a(enabled=true);
    fg_b = fps50_b(enabled=true);

    counter_a = fg_a.counter;
    counter_b = fg_b.counter;
}


Bool RunNestedAutomata3Test(Bool rand_times) {
  auto ta : nested_automata_3;

  auto apply ta done;
  assert done;

  ct = 0;

  for i < 1000:
    dt = if rand_times then _rand_nat_(45) else 1;
    ct = _add_(ct, dt);

    auto elapsed ta _mult_(dt, 1000000);
    loop
      auto apply ta done;
    while not done;

    ec = _div_(ct, 20);

    if ta.counter_a != ec or ta.counter_b != ec:
      Print("ERROR!\n");
      print (i: i, dt: dt, ct: ct);
      print ta.counter_a;
      print ta.counter_b;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}


Bool RunAllNestedAutomata3Tests() {
  ok = RunNestedAutomata3Test(false);
  return false if not ok;
  ok = RunNestedAutomata3Test(true);
  return ok;
}
