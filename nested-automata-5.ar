type NestedCmd5 = reset, set_counter(Nat);


Nat update_counter(NestedCmd5 cmd, Nat counter) =
  reset           = 0,
  set_counter(n?) = n;


reactive NestedAutomata5SomeCounter {
  input:
    an_input : Ta;
    command  : NestedCmd5?;

  output:
   a_counter : Nat;

  state:
   a_counter : Nat = 0;

  rules:
    a_counter = update_counter(command, a_counter);
    a_counter = nat(a_counter+1) if an_input == :a0 or an_input == :a3 : an_input, not command;
}


type Cmd5 = reset_1, reset_2, set_counters(Nat, Nat), set_incremented_counters(Nat, Nat);


Nat update_counter(Cmd5 cmd, Nat counter) =
  reset_1 | reset_2               = 0,
  set_counters(c?, _)             = c,
  set_incremented_counters(c?, _) = nat(c + 1);


NestedCmd5 nested_counter_command(Cmd5 cmd) =
  reset_1                           = :reset,
  reset_2                           = :set_counter(0),
  set_counters(_, n?)               = :set_counter(n),
  set_incremented_counters(_, n?)   = :set_counter(nat(n+1));


reactive NestedAutomata5 {
  input:
    my_input : Ta;
    command  : Cmd5?;

  output:
    my_counter : Nat;
    nested_counter : Nat;

  state:
    my_counter : Nat = 0;

  rules:
    nested_cmd := nested_counter_command(command);

    na = NestedAutomata5SomeCounter(an_input=my_input, command=nested_cmd);

    my_counter = update_counter(command, my_counter);
    my_counter = nat(my_counter+1) if my_input == :a1 or my_input == :a4 : my_input, not command;

    nested_counter = na.a_counter;
}


(Ta, Nat, Nat, Nat, Nat)* nested_automata_5_test_data = (
  (:a0, 0, 0, 1, 0),
  (:a1, 0, 1, 1, 1),
  (:a2, 0, 1, 1, 1),
  (:a3, 1, 1, 2, 1),
  (:a4, 1, 2, 2, 2),
  (:a0, 2, 2, 3, 2),
  (:a1, 2, 3, 3, 3),
  (:a2, 2, 3, 3, 3),
  (:a3, 3, 3, 4, 3),
  (:a4, 3, 4, 4, 4)
);


Bool RunAllNestedAutomata5Tests() {
  auto ta : NestedAutomata5;

  for input, enc, ec, denc, dec <- nested_automata_5_test_data:
    auto ta.my_input = input;
    auto apply ta done;
    assert done;

    if ta.my_counter != ec or ta.nested_counter != enc:
      Print("ERROR\n");
      print (input, enc, ec, denc, dec);
      print ta.my_counter;
      print ta.nested_counter;
      return false;
    // else
      // Print("OK\n");
    ;
  ;

  auto ta.command = :reset_1;
  auto apply ta done;
  assert done;
  benc = 0;
  bec = 0;

  if ta.my_counter != bec or ta.nested_counter != benc:
    Print("ERROR (2/A)\n");
    print ta.my_counter;
    print ta.nested_counter;
    return false;
  // else
    // Print("OK\n");
  ;

  for input, enc, ec, denc, dec <- nested_automata_5_test_data:
    auto ta.my_input = input;
    auto apply ta done;
    assert done;

    if ta.my_counter != _add_(bec, dec) or ta.nested_counter != _add_(benc, denc):
      Print("ERROR (2/B)\n");
      print (input, enc, ec, denc, dec);
      print (benc, bec);
      print ta.my_counter;
      print ta.nested_counter;
      return false;
    // else
      // Print("OK\n");
    ;
  ;

  auto ta.command = :reset_2;
  auto apply ta done;
  assert done;
  benc = 0;
  bec = 0;

  if ta.my_counter != bec or ta.nested_counter != benc:
    Print("ERROR (3/A)\n");
    print ta.my_counter;
    print ta.nested_counter;
    return false;
  // else
    // Print("OK\n");
  ;

  for input, enc, ec, denc, dec <- nested_automata_5_test_data:
    auto ta.my_input = input;
    auto apply ta done;
    assert done;

    if ta.my_counter != _add_(bec, dec) or ta.nested_counter != _add_(benc, denc):
      Print("ERROR (3/B)\n");
      print (input, enc, ec, denc, dec);
      print (benc, bec);
      print ta.my_counter;
      print ta.nested_counter;
      return false;
    // else
      // Print("OK\n");
    ;
  ;

  bec = 13;
  benc = 8;
  auto ta.command = :set_counters(bec, benc);
  auto apply ta done;
  assert done;

  if ta.my_counter != bec or ta.nested_counter != benc:
    Print("ERROR (4/A)\n");
    print ta.my_counter;
    print ta.nested_counter;
    return false;
  // else
  //   Print("OK\n");
  ;

  for input, enc, ec, denc, dec <- nested_automata_5_test_data:
    auto ta.my_input = input;
    auto apply ta done;
    assert done;

    if ta.my_counter != _add_(bec, dec) or ta.nested_counter != _add_(benc, denc):
      Print("ERROR (4/B)\n");
      print (input, enc, ec, denc, dec);
      print (benc, bec);
      print ta.my_counter;
      print ta.nested_counter;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  bec = 21;
  benc = 37;
  auto ta.command = :set_incremented_counters(bec, benc);
  auto apply ta done;
  assert done;
  bec = _add_(bec, 1);
  benc = _add_(benc, 1);

  if ta.my_counter != bec or ta.nested_counter != benc:
    Print("ERROR (5/A)\n");
    print ta.my_counter;
    print ta.nested_counter;
    return false;
  // else
  //   Print("OK\n");
  ;

  for input, enc, ec, denc, dec <- nested_automata_5_test_data:
    auto ta.my_input = input;
    auto apply ta done;
    assert done;

    if ta.my_counter != _add_(bec, dec) or ta.nested_counter != _add_(benc, denc):
      Print("ERROR (5/B)\n");
      print (input, enc, ec, denc, dec);
      print (benc, bec);
      print ta.my_counter;
      print ta.nested_counter;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}
