reactive complex_init
{
  input:
    i : Ta;

  output:
    v1 : Ta;
    v2 : Ta;
    d1 : Ta;
    d2 : Ta;

  state:
    v1 : Ta = :g(d1);
    v2 : Ta = :l(d2);

  rules:
    d1 = :f(i);
    d2 = :h(v1);
}


Any* complex_init_test_data = (
  (:a0, :g(:f(:a0)), :l(:h(:g(:f(:a0)))), :f(:a0), :h(:g(:f(:a0)))),
  (:a1, :g(:f(:a0)), :l(:h(:g(:f(:a0)))), :f(:a1), :h(:g(:f(:a0)))),
  (:a2, :g(:f(:a0)), :l(:h(:g(:f(:a0)))), :f(:a2), :h(:g(:f(:a0)))),
  (:a3, :g(:f(:a0)), :l(:h(:g(:f(:a0)))), :f(:a3), :h(:g(:f(:a0)))),
  (:a4, :g(:f(:a0)), :l(:h(:g(:f(:a0)))), :f(:a4), :h(:g(:f(:a0))))
);


Bool RunAllComplexInitTests()
{
  auto ci : complex_init;

  for i, ev1, ev2, ed1, ed2 <- complex_init_test_data:
    auto ci.i = i;
    auto apply ci done;
    assert done;
    if ci.v1 != ev1 or ci.v2 != ev2 or ci.d1 != ed1 or ci.d2 != ed2:
      Print("Error in complex initialization tests\n");
      print (ev1, ev2, ed1, ed2);
      print ci.v1;
      print ci.v2;
      print ci.d1;
      print ci.d2;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}
