type Ta = a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
type Tb = b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10;

type Tab = Ta, Tb;


reactive DiscrYComb {
  input:
    ia : Ta?;
    ib : Tb?;

  output:
    o : Tab?;

  rules:
    o := ia;
    o := ib : ib, not ia;
}


(<Ta, none>, <Tb, none>, <Tab, none>)* discr_y_comb_test_data = (
  (:a0,     :b0,    :a0),
  (:a1,     :none,  :a1),
  (:none,   :b2,    :b2),
  (:none,   :none,  :none),
  (:none,   :b4,    :b4),
  (:none,   :none,  :none),
  (:a6,     :none,  :a6),
  (:none,   :none,  :none),
  (:a8,     :b8,    :a8)
);


Bool RunBasicDiscYCombTests() {
  auto yc : DiscrYComb;

  for ia, ib, eo <- discr_y_comb_test_data:
    if ia != :none:
      auto yc.ia = ia;
    ;
    if ib != :none:
      auto yc.ib = ib;
    ;

    auto apply yc done;
    assert done;

    ok = if yc.o? then yc.o == eo else eo == :none;

    if not ok:
      Print("Error!\n");
      print (ia, ib, eo);
      print yc.o;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}


Bool RunAllDiscYCombTests() {
  ok = RunBasicDiscYCombTests();
  return ok;
}