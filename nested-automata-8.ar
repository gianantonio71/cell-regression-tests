type SomeCounterMgs = reset, incr_counter(Nat);


reactive SomeCounter {
  input:
    an_input : Ta;
    msg      : SomeCounterMgs?;

  output:
    a_counter : Nat;

  state:
    flow_counter : Nat = 0;
    msg_counter  : Nat = 0;

  rules:
    flow_counter = nat(flow_counter + 1) when an_input == :a0 or an_input == :a3 or an_input == :a5;
    msg_counter = if msg == :reset then 0 else nat(msg_counter + _untag_(msg));

    a_counter = nat(flow_counter + msg_counter);
}


reactive Test1 {
  input:
    my_input  : Ta;
    increment : Nat?;

  output:
    my_counter     : Nat;
    nested_counter : Nat;

  state:
    my_counter : Nat = 0;

  rules:
    // msg := :incr_counter(increment);
    // msg := :incr_counter(increment) : increment;
    msg := :incr_counter(increment) if my_input != :a0;
    na = SomeCounter(an_input=my_input, msg=msg);
    my_counter = nat(my_counter + 1) when my_input == :a1 or my_input == :a4;
    nested_counter = na.a_counter;
}


reactive Test2 {
  input:
    increment : Nat?;
    my_input : Ta;

  output:
    my_counter     : Nat;
    nested_counter : Nat;

  state:
    my_counter : Nat = 0;

  rules:
    msg := :incr_counter(increment) if my_input == :a2 or my_input == :a5 : increment;
    na = SomeCounter(an_input=my_input, msg=msg);

    my_counter = nat(my_counter + 1) when my_input == :a1 or my_input == :a4;

    nested_counter = na.a_counter;
}


(Ta, Maybe[Nat], Nat, Nat)* test_1_data = (
  (:a0,   nothing,    0,    0),
  (:a1,   nothing,    1,    0),
  (:a2,   nothing,    1,    0),
  (:a3,   nothing,    1,    1),
  (:a4,   :just(10),  2,   11),
  (:a5,   nothing,    2,   12),
  (:a6,   nothing,    2,   12),
  (:a0,   :just(100), 2,   13),
  (:a1,   nothing,    3,   13),
  (:a2,   nothing,    3,   13),
  (:a3,   nothing,    3,   14),
  (:a4,   nothing,    4,   14),
  (:a5,   nothing,    4,   15),
  (:a0,   nothing,    4,   15)
);


(Ta, Maybe[Nat], Nat, Nat)* test_2_data = (
  (:a0,   nothing,      0,    0),
  (:a1,   nothing,      1,    0),
  (:a2,   nothing,      1,    0),
  (:a3,   nothing,      1,    1),
  (:a4,   :just(10),    2,    1),
  (:a5,   :just(20),    2,   22),
  (:a6,   nothing,      2,   22),
  (:a0,   :just(100),   2,   23),
  (:a1,   nothing,      3,   23),
  (:a2,   :just(200),   3,  223),
  (:a3,   nothing,      3,  224),
  (:a4,   nothing,      4,  224),
  (:a5,   nothing,      4,  225),
  (:a0,   nothing,      4,  225)
);


Bool RunNestedAutomata8Test1() {
  auto ta : Test1;

  for input, incr, ec, enc <- test_1_data:
    auto ta.my_input = input;
    if incr != nothing:
      auto ta.increment = match (incr) just(n?) = n;
    ;
    auto apply ta done;
    assert done;

    if ta.my_counter != ec or ta.nested_counter != enc:
      Print("ERROR (1)\n");
      print (input, incr, enc, ec);
      print ta.my_counter;
      print ta.nested_counter;
      return false;
    // else
    //   Print("OK (1)\n");
    //   print (input, enc, ec);
    //   print ta.my_counter;
    //   print ta.nested_counter;
    ;
  ;
  return true;
}


Bool RunNestedAutomata8Test2() {
  auto ta : Test2;

  for input, incr, ec, enc <- test_2_data:
    auto ta.my_input = input;
    if incr != nothing:
      auto ta.increment = match (incr) just(n?) = n;
    ;
    auto apply ta done;
    assert done;

    if ta.my_counter != ec or ta.nested_counter != enc:
      Print("ERROR (2)\n");
      print (input, incr, enc, ec);
      print ta.my_counter;
      print ta.nested_counter;
      return false;
    // else
    //   Print("OK (2)\n");
      // print (input, enc, ec);
      // print ta;
    ;
  ;
  return true;
}


Bool RunAllNestedAutomata8Tests() {
  ok = RunNestedAutomata8Test1();
  return false if not ok;
  ok = RunNestedAutomata8Test2();
  return ok;
}