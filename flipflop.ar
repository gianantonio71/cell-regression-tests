reactive Bool flipflop(on, off)
{
  input:
    on  : Bool;
    off : Bool;

  state:
    flipflop : Bool = if   on and off then {fail;}
                      elif on         then true
                      elif off        then false
                                      else init_state;

  static:
    init_state = false;

  rules:
    flipflop = {fail;}  if on and off,
               true     if on,
               false    if off;
}


reactive Bool flipflop_client
{
  input:
    action : <on, off, same>?;

  output:
    flipflop_state_bad : Bool;

  state:
    on  : Bool = false;
    off : Bool = false;

  rules:
    on = true  if action == :on,
         false if action == :off;

    off = true  if action == :off,
          false if action == :on;


    flipflop = flipflop(on=on, off=off);

    flipflop_client = flipflop;

    // flipflop_state_bad = flipflop.flipflop;
}


reactive Bool flipflop_client_positional
{
  input:
    action : <on, off, same>?;

  state:
    on  : Bool = false;
    off : Bool = false;

  rules:
    on = true  if action == :on,
         false if action == :off;

    off = true  if action == :off,
          false if action == :on;

    flipflop = flipflop(on, off);
    // flipflop = flipflop(action? and action == :on, action? and action == :off);

    flipflop_client_positional = flipflop;
}


(<on, off, same, nil>, Bool)* flipflop_test_data_1 = (
  (nil,     false),
  (:same,   false),
  (:off,    false),
  (:on,     true),
  (nil,     true),
  (:on,     true),
  (:same,   true),
  (:off,    false)
);


Bool RunBasicFlipFlopTest((<on, off, same, nil>, Bool) test_data)
{
  auto fc  : flipflop_client;
  auto fcp : flipflop_client_positional;

  auto apply fc done;
  assert done;
  auto apply fcp done;
  assert done;
  if fc != false or fcp != false:
    Print("ERROR: INITIAL UPDATE FAILED SOMEHOW!\n");
    print fc;
    print fcp;
    return false;
  ;

  for a, er <- test_data:
    auto fc.action = a;
    auto fcp.action = a;
    auto apply fc done;
    assert done;
    auto apply fcp done;
    assert done;
    if fc != er or fcp != er:
      Print("ERROR! ERROR! ERROR!\n");
      print fc;
      print fcp;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}


Bool RunAllFlipFlopTests()
{
  ok = RunBasicFlipFlopTest(flipflop_test_data_1);
  return ok;
}
