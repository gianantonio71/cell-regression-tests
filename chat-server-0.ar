schema ChatServer0CoreState
{
  user_names : [UserId -> String]    = [:];
  user_ids   : [String -> UserId]    = [:];
  user_rooms : [UserId -> RoomId]    = [:];
  room_users : [RoomId -> [+UserId]] = [:];
}


ChatServer0CoreState <- ChatServerCoreAction
{
  do(it);
}


using ChatServer0CoreState
{
  do(Login msg)
  {
    user = msg.user;
    name = msg.name;
    update user_names = update(user_names, user, name);
    update user_ids   = update(user_ids, name, user);
    update user_rooms = update(user_rooms, user, []);
  }


  do(Logout msg)
  {
    user = msg.user;
    name = user_names[user];
    rooms = user_rooms[user];

    update user_ids    = remove_key(user_ids, name);
    update user_names  = remove_key(user_names, user);
    update user_rooms  = remove_key(user_rooms, user);

    unaffected_rooms = remove_keys(room_users, rooms);
    affected_rooms = [r -> users_left : r <- rooms, users_left = room_users[r] - [user], users_left != []];
    update room_users = unaffected_rooms & affected_rooms;
  }


  do(JoinRoom msg)
  {
    user = msg.user;
    room = msg.room;

    new_rooms = user_rooms[user] & [room];
    update user_rooms = update(user_rooms, user, new_rooms);

    new_users = lookup(room_users, room, []) & [user];
    update room_users = update(room_users, room, new_users);
  }


  do(LeaveRoom msg)
  {
    user = msg.user;
    room = msg.room;

    new_rooms = user_rooms[user] - [room];
    update user_rooms = update(user_rooms, user, new_rooms);

    users_left = room_users[room] - [user];
    update room_users = if users_left != []
      then update(room_users, room, users_left)
      else remove_key(room_users, room);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

schema ChatServer0
{
  pending_inputs : [Nat -> Byte*]         = [:];
  data_to_send   : [Nat -> (Nat, String)] = [:];
  msg_counter    : Nat                    = 0;

  core_state : ChatServer0CoreState;
}


ChatServer0 <- ChatServerMsg
{
  do(it);
}


using ChatServer0
{
  do(Connect msg)
  {
    update pending_inputs = update(pending_inputs, msg.channel, ());
  }


  do(Disconnect msg)
  {
    channel = msg.channel;
    update pending_inputs = remove_key(pending_inputs, channel);
    is_logged_in = has_key(core_state.user_names, channel);
    core_state <- logout(user: channel) if is_logged_in;
  }


  do(Received msg)
  {
    channel = msg.channel;
    new_data = msg.data;
    pend_data = pending_inputs[channel];

    if new_data == ascii_newline:
      update pending_inputs = update(pending_inputs, channel, ());
      maybe_msg = try_parse_msg(pending_inputs[channel], channel);
      if maybe_msg != nothing:
        do(value(maybe_msg));
      else
        update data_to_send = data_to_send & [msg_counter -> (channel, "ERROR syntax error")];
        update msg_counter = msg_counter + 1;
      ;

    else
      update pending_inputs = update(pending_inputs, channel, (pend_data | new_data));
    ;
  }


  do(Sent msg)
  {
    update data_to_send = remove_key(data_to_send, msg.msg_id);
  }

  ////////////////////////////////////////////////////////////////////////////////

  do(Login msg)
  {
    user = msg.user;
    name = msg.name;

    already_logged_in = has_key(core_state.user_names, user);
    name_already_taken = has_key(core_state.user_ids, name);

    core_state <- msg if not {already_logged_in or name_already_taken};

    resp_msg = if   already_logged_in    then "ERROR already logged in"
               elif name_already_taken   then "ERROR name already in use"
                                         else "OK";

    update data_to_send = update(data_to_send, msg_counter, (user, resp_msg));
    update msg_counter = msg_counter + 1;
  }


  do(Logout msg)
  {
    core_state <- msg if has_key(core_state.user_names, msg.user);
  }


  do(JoinRoom msg)
  {
    user = msg.user;

    is_logged_in = has_key(core_state.user_names, user);

    core_state <- msg if is_logged_in;

    resp_msg = if is_logged_in then "OK" else "ERROR not logged in";

    update data_to_send = update(data_to_send, msg_counter, (user, resp_msg));
    update msg_counter  = msg_counter + 1;
  }


  do(LeaveRoom msg)
  {
    user = msg.user;
    room = msg.room;

    is_logged_in = has_key(core_state.user_names, user);
    has_joined_room = is_logged_in and core_state.user_rooms[user](room);

    core_state <- msg if has_joined_room;

    resp_msg = if   not is_logged_in    then "ERROR not logged in"
               elif not has_joined_room then "ERROR never joined room"
                                        else "OK";

    update data_to_send = update(data_to_send, msg_counter, (user, resp_msg));
    update msg_counter  = msg_counter + 1;
  }


  do(SendMsgToUser msg)
  {
    sender = msg.sender;
    receiver = msg.receiver;
    msg_text = msg.msg_text;

    is_logged_in = has_key(core_state.user_names, sender);
    target_exists = has_key(core_state.user_ids, receiver);

    resp_msg = if   not is_logged_in  then "ERROR not logged in"
               elif not target_exists then "ERROR unknown user"
                                      else "OK";

    new_data_to_send = [msg_counter -> (sender, resp_msg)];
    msgs_sent = 1;

    if is_logged_in and target_exists:
      fwd_msg = "GOTUSERMSG " & core_state.user_names[sender] & " " & msg_text;
      new_data_to_send = new_data_to_send & [msg_counter + msgs_sent -> (core_state.user_ids[receiver], fwd_msg)];
      msgs_sent = msgs_sent + 1;
    ;

    update data_to_send = data_to_send & new_data_to_send;
    update msg_counter = msg_counter + msgs_sent;
  }


  do(SendMsgToRoom msg)
  {
    sender = msg.sender;
    target = msg.target;
    msg_text = msg.msg_text;

    is_logged_in = has_key(core_state.user_names, sender);
    has_joined_room = is_logged_in and core_state.user_rooms[sender](target);

    resp_msg = if   not is_logged_in      then "ERROR not logged in"
               elif not has_joined_room   then "ERROR never joined room"
                                          else "OK";

    new_data_to_send = [msg_counter -> (sender, resp_msg)];
    msgs_sent = 1;

    if is_logged_in:
      fwd_msg = "GOTROOMMSG " & core_state.user_names[sender] & " #" & target & " " & msg_text;
      receivers = rand_sort(lookup(core_state.room_users, target, []));
      new_data_to_send = new_data_to_send & merge(([msg_counter + i + 1 -> (r, fwd_msg)] : r @ i <- receivers));
      msgs_sent = msgs_sent + length(receivers);
    ;

    update data_to_send = data_to_send & new_data_to_send;
    update msg_counter = msg_counter + msgs_sent;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Bool RunAllChatServer0Tests()
{
  auto cs : ChatServer0;

  sorted_users = rand_sort(set((u : u, unused_var <- chat_server_test_data_1)));
  conn_ids = merge(([u -> i] : u @ i <- sorted_users));

  for i < size(conn_ids):
    auto ok = cs <- connect(i);
  ;

  for u, s <- chat_server_test_data_1:
    cid = conn_ids[u];
    for ch <- raw_str(s):
      auto ok = cs <- received(cid, ch);
    ;
    auto ok = cs <- received(cid, ascii_newline);
    // print s;
    // print cs;
  ;

  for i < size(conn_ids):
    auto ok = cs <- disconnect(i);
    // print cs;
  ;

  if cs.data_to_send != chat_server_exp_res_1:
    Print("ERROR (1)\n");
    print cs.data_to_send;
    print chat_server_exp_res_1;
    return false;
  ;

  for i < cs.msg_counter:
    auto ok = cs <- sent(i);
    // print cs;
    if size(cs.data_to_send) != cs.msg_counter - i - 1:
      Print("ERROR (2)\n");
      print i;
      print cs.data_to_send;
      return false;
    ;
  ;

  assert cs.data_to_send == [:];
  return true;
}
