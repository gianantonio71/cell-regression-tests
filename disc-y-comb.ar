type Ta = a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
type Tb = b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10;

type Tab = Ta, Tb;


reactive disc_y_comb
{
  input:
    ia : Ta?;
    ib : Tb?;

  output:
    o : Tab?;

  rules:
    o := if ia? then ia else ib : ia, ib;
}


(<Ta, nil>, <Tb, nil>, <Tab, nil>)* disc_y_comb_test_data = (
  (:a0, :b0, :a0),
  (:a1, nil, :a1),
  (nil, :b2, :b2),
  (nil, nil, nil),
  (nil, :b4, :b4),
  (nil, nil, nil),
  (:a6, nil, :a6),
  (nil, nil, nil),
  (:a8, :b8, :a8)
);


Bool RunBasicDiscYCombTests()
{
  auto yc : disc_y_comb;

  for ia, ib, eo <- disc_y_comb_test_data:
    if ia != nil:
      auto yc.ia = ia;
    ;
    if ib != nil:
      auto yc.ib = ib;
    ;

    auto apply yc done;
    assert done;

    ok = if yc.o? then yc.o == eo else eo == nil;

    if not ok:
      Print("Error!\n");
      print (ia, ib, eo);
      print yc.o;
      return false;
    // else
    //   Print("OK\n");
    ;
  ;

  return true;
}


Bool RunAllDiscYCombTests()
{
  ok = RunBasicDiscYCombTests();
  return ok;
}